import Head from 'next/head';
import { Prisma, PrismaClient } from '@prisma/client';
import fetcher from '../utils/fetcher';
import { useState } from 'react';
import * as React from 'react';
import prisma from '../lib/prisma';
import { TextField, Box, Button, MenuItem } from '@mui/material';

export async function getServerSideProps() {
  const users = await prisma.user.findMany();
  return {
    props: {
      initialUsers: users
    }
  }
}

const options = [
  { key: "d", text: "DEVELOPER", value: "DEVELOPER"},
  { key: "c", text: "CLIENT", value: "CLIENT"}
]

export default function Home({ initialUsers }) {
   const [ users, setUsers] = useState(initialUsers);
   const [ firstName, setFirstName] = useState("");
   const [ lastName, setLastName] = useState("");
   const [ email, setEmail] = useState("");
   const [ emailLogin, setEmailLogin] = useState("");
   const [ avatar, setAvatar] = useState("");
   const [ passwordLogin, setPasswordLogin] = useState("");
   const [ password, setPassword] = useState("");
   const [ role, setRole] = useState("");

   const handleChange = (event) => {
    setRole(event.target.value);
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div className="bg-home">
        <div className="container">
        <Box
          component="form"
          sx={{'& > :not(style)': { m: 1, width: '25ch' },}} 
          onSubmit={(e) => {
            e.preventDefault();
            const body = {
              email: emailLogin,
              password: passwordLogin,
            };
            fetcher("/api/signIn", body);
            setPasswordLogin("")
            setEmailLogin("");
          }}
        >
          <TextField
            size="small"
            id="outlined-email-input Login"
            label="Email"
            value={emailLogin}
            onChange={e => setEmailLogin(e.target.value)}
          />
          <TextField
            size="small"
            id="outlined-password-input logIn"
            label="Password"
            type="password"
            value={passwordLogin}
            onChange={e => setPasswordLogin(e.target.value)}
            autoComplete="current-password"
          />
          <div>
          <Button variant="outlined" type="submit" size="medium">
            Sign Up
          </Button>
          </div>
        </Box>

          <p>OR</p>

        <Box
          component="form"
          sx={{'& > :not(style)': { m: 1, width: '25ch' },}} 
          onSubmit={(e) => {
            e.preventDefault(); 
            const body: Prisma.UserCreateInput = {
              firstName,
              lastName,
              role,
              email,
              avatar,
              password,
            };
            fetcher("/api/create", body);
            setFirstName("");
            setLastName("");
            setEmail("");
            setAvatar("");
            setRole(null);
          }}
        >
          <TextField
            size="small"
            id="outlined-firstName-input"
            label="First Name"
            value={firstName}
            onChange={e => setFirstName(e.target.value)}
          />

          <TextField
            size="small"
            id="outlined-lastName-input"
            label="Last Name"
            value={lastName}
            onChange={e => setLastName(e.target.value)}
          />
          <TextField
            size="small"
            id="outlined-emailRegister-input"
            label="Email"
            value={email}
            onChange={e => setEmail(e.target.value)}
          />
          <TextField
            size="small"
            id="outlined-passwordRegister-input"
            label="Password"
            type="password"
            value={password}
            onChange={e => setPassword(e.target.value)}
            autoComplete="current-password"
          />
          <TextField 
            size="small" 
            id="avatar" 
            value={avatar} 
            onChange={e => setAvatar(e.target.value)} 
            label="Avatar" 
            type="input" 
          />
          <TextField
            size="small"
            select
            label="Select"
            value={role}
            onChange={handleChange}
            helperText="Please select your currency"
            >
            {options.map((option) => (
              <MenuItem key={option.key} value={option.value}>
                {option.text}
              </MenuItem>
            ))}
          </TextField>
          <div>
            <Button variant="outlined" type="submit" size="medium">
              Register
            </Button>
          </div>
        </Box>
        </div>
      </div>
    </>
  )
}

