import Image from 'next/image'
import Head from 'next/head';
import { Prisma, PrismaClient } from '@prisma/client';
import { BiChevronsDown, BiChevronsUp } from 'react-icons/bi';
import fetcher from '../utils/fetcher';
import { useState } from 'react';
import * as React from 'react';
import prisma from '../lib/prisma';
import { TextField, Box, Button, MenuItem, AppBar, Toolbar, IconButton, Typography } from '@mui/material';

import Link from 'next/link';
import { useRouter } from 'next/router';

export async function getServerSideProps() {
  const users = await prisma.user.findMany();
  return {
    props: {
      initialUsers: users
    }
  }
}

const options = [
  { key: "d", text: "DEVELOPER", value: "DEVELOPER"},
  { key: "c", text: "CLIENT", value: "CLIENT"}
]

export default function Home() {

  return (
    <>
      <Head>
        <title>CRM app</title>
        <meta name="description" content="Generated by create next app" />
      </Head>
      <div className="root">
        <Navbar />
        <EntryForm />
      </div>
    </>
  )
}

function Navbar() {
  const router = useRouter();
  console.log(router.pathname)
  return(
    <div className="topnav">
      <Image src="/logo1.png" alt="logo" width="200px" height="69px" />
      <div className="navSpaceBetween"></div>
      
      <Link href="#" >
        <a className={router.pathname == "/" ? "navLink active" : "navLink"}>
            Sign in
        </a>
      </Link>

      <Link href="#aaa" >
        <a className={router.asPath == "/#aaa" ? "navLink active" : "navLink"}>
          Sign up
        </a>
      </Link>


    </div>
  )
}


function EntryForm( initialUsers ) {
  const [ showRegisterForm, setShowRegisterForm ] = useState(false);
  const [ users, setUsers] = useState(initialUsers);
  const [ firstName, setFirstName] = useState("");
  const [ lastName, setLastName] = useState("");
  const [ email, setEmail] = useState("");
  const [ emailLogin, setEmailLogin] = useState("");
  const [ avatar, setAvatar] = useState("");
  const [ passwordLogin, setPasswordLogin] = useState("");
  const [ password, setPassword] = useState("");
  const [ role, setRole] = useState("");

  const handleChange = (event) => {
    setRole(event.target.value);
  };
  return(
    <div className={showRegisterForm ? "container container__expanded" : "container"}>
      <Box
        component="form"
        sx={{'& > :not(style)': { my: 1,},}} 
        onSubmit={(e) => {
          e.preventDefault();
          const body = {
            email: emailLogin,
            password: passwordLogin,
          };
          fetcher("/api/signIn", body);
          setPasswordLogin("")
          setEmailLogin("");
        }}
      >
        <TextField
          size="small"
          id="outlined-email-input Login"
          color="success"
          label="Email"
          value={emailLogin}
          onChange={e => setEmailLogin(e.target.value)}
        />
        <TextField
          size="small"
          id="outlined-password-input logIn"
          color="success"
          label="Password"
          type="password"
          value={passwordLogin}
          onChange={e => setPasswordLogin(e.target.value)}
          autoComplete="current-password"
        />
        <div>
        <Button variant="contained" sx={{backgroundColor: "#248f47"}} type="submit" size="medium">
          Sign Up
        </Button>
        </div>
      </Box>

      <Box
        component="form"
        className={showRegisterForm ? "registerForm-on" : "registerForm-off"}
        sx={{'& > :not(style)': { m: 1, width: '25ch' },}} 
        onSubmit={(e) => {
          e.preventDefault(); 
          const body: Prisma.UserCreateInput = {
            firstName,
            lastName,
            role,
            email,
            avatar,
            password,
          };
          fetcher("/api/create", body);
          setFirstName("");
          setLastName("");
          setEmail("");
          setAvatar("");
          setRole(null);
        }}
      >
        <TextField
          size="small"
          id="outlined-firstName-input"
          color="success"
          label="First Name"
          value={firstName}
          onChange={e => setFirstName(e.target.value)}
        />

        <TextField
          size="small"
          id="outlined-lastName-input"
          color="success"
          label="Last Name"
          value={lastName}
          onChange={e => setLastName(e.target.value)}
        />
        <TextField
          size="small"
          id="outlined-emailRegister-input"
          color="success"
          label="Email"
          value={email}
          onChange={e => setEmail(e.target.value)}
        />
        <TextField
          size="small"
          id="outlined-passwordRegister-input"
          color="success"
          label="Password"
          type="password"
          value={password}
          onChange={e => setPassword(e.target.value)}
          autoComplete="current-password"
        />
        <TextField 
          size="small" 
          id="avatar" 
          color="success"
          value={avatar} 
          onChange={e => setAvatar(e.target.value)} 
          label="Avatar" 
          type="input" 
        />
        <TextField
          size="small"
          select
          label="Select"
          color="success"
          value={role}
          onChange={handleChange}
          helperText="Please select your currency"
          >
          {options.map((option) => (
            <MenuItem key={option.key} value={option.value}>
              {option.text}
            </MenuItem>
          ))}
        </TextField>
        <div>
          <Button variant="contained" sx={{backgroundColor: "#248f47"}} type="submit" size="medium">
            Register
          </Button>
        </div>
      </Box>
      <button 
        className="registerBtn"
        onClick={()=> setShowRegisterForm(!showRegisterForm)}>
          register {showRegisterForm ? <BiChevronsUp /> : <BiChevronsDown />}
      </button>
    </div>
  )
}
